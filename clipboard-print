#!/usr/bin/env python3

import sys
import os
import subprocess
import optparse
import tempfile

try:
    import pygtk
except ImportError:
    # Fedora 23+
    #if not os.path.isdir('/usr/lib64/pygtk/2.0'):
        #    raise
    pygtklibdir = os.path.join('usr', 'lib64', 'pygtk', '2.0')
    sys.path.insert(0, pygtklibdir)
    #print('pre 2nd import')
    try:
        import pygtk
    except ImportError:
        pygtk = None
        gtk = None

if pygtk is not None:
    pygtk.require('2.0')
if gtk is not None:
    import gtk

def program_name():
    return os.path.basename(sys.argv[0])

def mac_clipboard_get_text():
    with tempfile.TemporaryFile(mode='w+') as tf:
        subprocess.check_call(['pbpaste'], stdout=tf)
        tf.seek(0)
        return tf.read()

def mac_clipboard_set_text(text):
    p = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
    p.stdin.write(text.encode('utf-8'))
    p.stdin.close()
    r = p.wait()
    if r != 0:
        raise RuntimeError('pbcopy returned ' + str(r))

def gtk_clipboard_get_text(selection):
    'return textual data from the X11 clipboard. @selection should be "PRIMARY" or "CLIPBOARD"'
    clipboard = gtk.Clipboard(selection=selection)
    return clipboard.wait_for_text()

def gtk_clipboard_set_text(text, selection):
    clipboard = gtk.Clipboard(selection=selection)
    clipboard.set_text(text)
    # make the data stick around after this process exits
    clipboard.store()

def clipboard_get_text(selection):
    if gtk is None:
        return mac_clipboard_get_text()
    else:
        return gtk_clipboard_get_text(selection)

def clipboard_set_text(text, selection):
    if gtk is None:
        return mac_clipboard_set_text(text)
    else:
        return gtk_clipboard_set_text(text, selection)

main_function_list = []

def main_function(func):
    global main_function_list
    main_function_list.append(func)
    return func

@main_function
def clipboard_print(args):
    op = optparse.OptionParser(option_list=[
        optparse.Option('-p', '--primary', action='store_true',
                        help=('use PRIMARY instead of CLIPBOARD as the X11 selection.\n'
                              'PRIMARY usually contains the currently selected text.')),
        optparse.Option('-n', '--no-newline', action='store_true', help="don't add newline"),
    ])
    (options, args) = op.parse_args(args)
    if options.primary:
        s = 'PRIMARY'
    else:
        s = 'CLIPBOARD'
    sys.stdout.write(clipboard_get_text(s))
    if not options.no_newline:
        sys.stdout.write('\n')

@main_function
def clipboard_copy(args):
    'copy file to clipboard'
    op = optparse.OptionParser(usage='usage: %prog FILE', option_list=[
        optparse.Option('-p', '--primary', action='store_true',
                        help='use PRIMARY instead of CLIPBOARD as the X11 selection'),
    ])
    (options, args) = op.parse_args(args)
    try:
        (filename,) = args
    except ValueError:
        op.print_usage(sys.stderr)
        sys.exit(2)

    if options.primary:
        s = 'PRIMARY'
    else:
        s = 'CLIPBOARD'
    clipboard_set_text(open(filename).read(), selection=s)

@main_function
def clipboard_open_file_line(args):
    'assume input in "filename:line" (ie. grep) format, open in editor'
    (filename, line) = clipboard_get_text('PRIMARY').strip().split(':')

    editor_cmd = os.environ.get('VISUAL')
    if editor_cmd is None:
        editor_cmd = os.environ.get('EDITOR', 'vim')
    # FIXME: not all editors handle "filename +line" cmd line
    return subprocess.call([ editor_cmd, filename, '+%s' % line ])

def main(args):
    def to_command_name(s):
        return s.replace('_', '-')

    name_to_function = dict( (to_command_name(x.__name__), x)
                            for x in main_function_list )
    return name_to_function[program_name()](args)

@main_function
def clipboard_zh_tw_quote(args):
    op = optparse.OptionParser()
    (options, args) = op.parse_args(args)
    t = clipboard_get_text('PRIMARY')
    t = t.replace('「', '『')
    t = t.replace('」', '』')

    t = ''.join(['「' , t, '」'])
    clipboard_set_text(t, 'CLIPBOARD')

@main_function
def clipboard_html_escape(args):

    def print_usage_xit():
        sys.stderr.write('usage: %s [FILE]\n' % (program_name(),))
        sys.exit(2)

    op = optparse.OptionParser()
    (options, args) = op.parse_args(args)
    if len(args) == 0:
        t = clipboard_get_text('PRIMARY')
    elif len(args) == 1:
        t = open(args[0]).read()
    else:
        print_usage_exit()

    if t:
        t = cgi.escape(t)
    clipboard_set_text(t, 'CLIPBOARD')

if __name__ == '__main__':
    main(sys.argv[1:])
