#!/usr/bin/env python

# Extract only the audio streams from video files
#$ video-extract-audio FILE [FILE...]

import sys
import os
import subprocess
import errno
import optparse

def video_extract_audio(filename, options):
    # Outline for reasonable implementation
    # Detect audio streams in file
    # $ ffmpeg -i INPUT-FILE

    # Copy audio streams to output, filename extension from herustic
    # keep A/V container format
    # $ ffmpeg -i INPUT-FILE -map 0:1 -acodec copy OUTPUT-FILE

    # TODO: Preserve metadata if possible

    container_ext_to_audio_only_ext = {
        '.mp4': '.m4a',
        '.mkv': '.mka',

        # can't find any audio-only extensions for WebM http://www.webmproject.org/docs/container/
        # Need an extension known to ffmpeg to avoid "Unable to find a suitable output format for t.EXT" errors
        '.webm': '.audio-only.webm',
    }

    if options.out_filename is None: 
        (basename, ext) = os.path.splitext(filename)
        basename = os.path.basename(basename)
        new_ext = container_ext_to_audio_only_ext.get(ext)
        if new_ext is None:
            raise ValueError('Unknown file format \"%s\"' % (filename,))
        out_filename = basename + new_ext
    else:
        out_filename = options.out_filename

    # avoid overwriting input file
    assert(out_filename != filename)
    # FIXME: hardcoding for youtube-dl
    file_stream = '0:1' # 2nd stream of 1st file
    subprocess.check_call(['ffmpeg',
                           '-y', # overwrite output files
                           '-i', filename,
                           '-map', file_stream,
                           '-acodec', 'copy',
                           out_filename])

def main(args):
    p = optparse.OptionParser(option_list=[optparse.Option('-o', '--output', help='output file', dest='out_filename')])
    (options, args) = p.parse_args(args)
    for i in args:
        try:
            video_extract_audio(i, options)
        except OSError as e:
            if e.errno != errno.ENOENT:
                raise
            sys.stderr.write("You don't have ffmpeg installed, aborting\n")
            sys.exit(2)

if __name__ == '__main__':
    main(sys.argv[1:])
